Catalyst ELB
---------------------------------------------------------------

AMI: "CAT-n3"
SG:  cat-sg

aws autoscaling create-launch-configuration \
    --key-name va-services \
    --instance-type m1.medium  \
    --associate-public-ip-address \
    --security-groups sg-b0c4d2d2 \
    --launch-configuration-name cat-lc \
    --image-id ami-eef862de

aws autoscaling create-auto-scaling-group \
        --auto-scaling-group-name cat-grp \
        --launch-configuration-name cat-lc \
        --min-size 2 --max-size 6 --desired-capacity 2 \
        --vpc-zone-identifier "subnet-7663311e,subnet-4356772b,subnet-f0b5e0b6" \
        --load-balancer-names CAT

mq-redis servers run locally, access redis on "redis server".

Upload ELB
-------------------------------------------------------------

AMI: "UP-n2"
SG:  up-sg

aws autoscaling create-launch-configuration \
    --launch-configuration-name up-lc \
    --image-id ami-42af3472 --instance-type m1.medium  \
    --associate-public-ip-address \
    --security-groups sg-48e9ff2a

aws autoscaling create-auto-scaling-group \
        --auto-scaling-group-name up-grp \
        --launch-configuration-name up-lc \
        --min-size 2 --max-size 6 --desired-capacity 2 \
        --vpc-zone-identifier "subnet-7663311e,subnet-4356772b,subnet-f0b5e0b6" \
        --load-balancer-names UP

** auto-scaling **

aws autoscaling put-scaling-policy --policy-name up-sp-up \
        --auto-scaling-group-name up-grp \
        --adjustment-type ChangeInCapacity \
        --scaling-adjustment 1
( arn = )

aws autoscaling put-scaling-policy --policy-name up-sp-down \
        --auto-scaling-group-name up-grp \
        --adjustment-type ChangeInCapacity \
        --scaling-adjustment -1

( arn = )

aws cloudwatch put-metric-alarm --alarm-name AddUploadCapacity \
        --metric-name CPUUtilization --namespace AWS/EC2 \
        --dimensions Name=AutoScalingGroupName,Value=up-grp \
        --statistic Average --period 120 --threshold 80 \
        --comparison-operator GreaterThanOrEqualToThreshold \
        --evaluation-periods 2 \
        --alarm-actions "$UP_ARN"

aws cloudwatch put-metric-alarm --alarm-name RemoveUploadCapacity \
        --metric-name CPUUtilization --namespace AWS/EC2 \
        --dimensions Name=AutoScalingGroupName,Value=up-grp \
        --statistic Average --period 120 --threshold 60 \
        --comparison-operator LessThanOrEqualToThreshold \
        --evaluation-periods 2 \
        --alarm-actions "$DOWN_ARN"

--- MAINTENANCE --------------------------

Change AMI instance used to launch (SEE BELOW FOR A QUICK WAY):

1. Terminate existing instances
aws autoscaling update-auto-scaling-group --min-size 0 --desired-capacity 0 \
    --auto-scaling-group-name cat-grp

2. Create temporary lc
aws autoscaling create-launch-configuration     \
    --instance-type m1.medium      \
    --associate-public-ip-address     \
    --security-groups sg-b0c4d2d2     \
    --launch-configuration-name cat-lc2 \
    --image-id ami-c636acf6

3. Switch group to use temp lc
aws autoscaling update-auto-scaling-group \
    --auto-scaling-group-name cat-grp \
    --launch-configuration-name cat-lc2

4. Delete old lc
aws autoscaling delete-launch-configuration --launch-configuration-name cat-lc

5. Create new lc (copy of #2, new name)
aws autoscaling create-launch-configuration     \
    --instance-type m1.medium      \
    --associate-public-ip-address     \
    --security-groups sg-b0c4d2d2     \
    --launch-configuration-name cat-lc \
    --image-id ami-c636acf6

6. Switch group to use new lc
aws autoscaling update-auto-scaling-group \
    --auto-scaling-group-name cat-grp \
    --launch-configuration-name cat-lc

7. Delete temporary lc
aws autoscaling delete-launch-configuration --launch-configuration-name cat-lc2

8. Start new instances
aws autoscaling update-auto-scaling-group --min-size 2 --desired-capacity 2 \
    --auto-scaling-group-name cat-grp

**********************************************************************

Create a new launch configuration with the new AMI:

aws autoscaling create-launch-configuration \
    --key-name va-services \
    --instance-type m1.medium  \
    --associate-public-ip-address \
    --security-groups sg-b0c4d2d2 \
    --launch-configuration-name NEW-NAME \
    --image-id NEW-AMI

Then change the LC in the ASG:

aws autoscaling update-auto-scaling-group 
    --auto-scaling-group-name cat-grp \
    --launch-configuration-name NEW_NAME

Newly launched instances will use the new AMI.  If you want to manually
kill off the old instances, replacing them with new instances, and keeping the
running instance count constant:

1. save list of current running instances for given autoscaling group
2. temporarily increase the number of desired instances +1
3. wait for the new instance to be available
4. terminate one instance from the list via

as-terminate-instance-in-auto-scaling-group i-XXXX \
    --no-decrement-desired-capacity --force
wait for the replacement instance to be available

if more than 1 instance is left repeat with 4.
terminate last instance from the list via

as-terminate-instance-in-auto-scaling-group i-XXXX \
    --decrement-desired-capacity --force

done, all instances should now run with same launch config
